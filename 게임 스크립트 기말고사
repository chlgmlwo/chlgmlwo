게임스크립트 기말고사
완성범위

팝업 UI
일시정지UI
- 게임재개버튼
- 메인화면버튼

게임오버UI
- 현재점수표시
- 최고점수표시
- 메인메뉴버튼
- 다시하기버튼

인게임플레이
- 플립을 성공하거나 일정 점프구간을 통과했을 경우 카운트되는 숫자
- 맵에 부딪쳤을 경우 게임오버
- 플립을 실패해서 착지에 실패한 경우 게임오버

세부스크립트

1. 게임매니저 스크립트

using UnityEngine;
using UnityEngine.SceneManagement;

public class GameManager : MonoBehaviour
{
    public GameObject gameOverPopup; // 게임 종료 팝업을 연결할 변수

    private bool isGameOver = false;

    void Start()
    {
        // 게임 종료 팝업 초기화
        if (gameOverPopup != null)
        {
            gameOverPopup.SetActive(false);
        }
    }

    void Update()
    {
        // 게임 오버 상태에서 "R" 키를 누를 때 게임을 다시 시작하도록 합니다.
        if (isGameOver && Input.GetKeyDown(KeyCode.R))
        {
            RestartGame();
        }
    }

    public void EndGame()
    {
        // 게임 종료 시 호출되는 함수
        isGameOver = true;

        // 게임 종료 팝업 활성화
        if (gameOverPopup != null)
        {
            gameOverPopup.SetActive(true);
        }
    }

    public void RestartGame()
    {
        // 게임 다시 시작 함수
        SceneManager.LoadScene(SceneManager.GetActiveScene().buildIndex);
    }
}

2. 메인 카메라 스크립트

using UnityEngine;

public class CameraFollow : MonoBehaviour
{
    public Transform target; // 바이크의 Transform을 여기에 할당
    public float cameraDistance = 10.0f; // 카메라와 대상 사이의 거리
    public float offsetX = 0.0f; // 바이크가 카메라 좌우로 얼마나 위치할지 조절
    public float offsetY = -1.0f; // 바이크가 카메라 아래로 얼마나 위치할지 조절

    void Update()
    {
        if (target != null)
        {
            // 카메라의 위치를 바이크의 위치로 조절하되, z 축 값을 cameraDistance로 설정
            Vector3 newPosition = new Vector3(target.position.x + offsetX, target.position.y + offsetY, -cameraDistance);
            transform.position = newPosition;
        }
    }
}

3. 팝업창 스크립트

using UnityEngine;
using UnityEngine.UI;

public class PopupController : MonoBehaviour
{
    public GameObject gameOverPanel; // 게임 오버 팝업 창 GameObject

    void Start()
    {
        // 게임 오버 팝업 창을 비활성화합니다.
        gameOverPanel.SetActive(false);
    }

    public void ShowGameOverPopup()
    {
        // 게임 오버 팝업 창을 활성화합니다.
        gameOverPanel.SetActive(true);
    }

    public void RestartGame()
    {
        // 게임을 다시 시작하는 로직을 추가합니다.
        // SceneManager.LoadScene("GameScene");
    }
}

4. 씬전환 스크립트

using UnityEngine;
using UnityEngine.SceneManagement;

public class SceneChanger : MonoBehaviour
{
    // 씬을 로드하는 함수입니다. 매개변수로 씬의 이름을 받습니다.
    public void LoadScene(string sceneName)
    {
        SceneManager.LoadScene(sceneName);
    }
}

5. 배경 스크립트
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class BackgroundScroll : MonoBehaviour
{
    public float scrollSpeed = 1.0f; // 배경 스크롤 속도
    public float backgroundSize = 10.0f; // 배경 이미지의 크기

    private Transform cameraTransform;
    private Transform[] layers;
    private float viewZone = 10.0f;
    private int leftIndex;
    private int rightIndex;
    private float lastCameraX;

    private void Start()
    {
        cameraTransform = Camera.main.transform;
        lastCameraX = cameraTransform.position.x;

        layers = new Transform[transform.childCount];
        for (int i = 0; i < transform.childCount; i++)
        {
            layers[i] = transform.GetChild(i);
        }

        leftIndex = 0;
        rightIndex = layers.Length - 1;

        // 배경 이미지 크기 조정
        ResizeBackground();
    }

    private void Update()
    {
        float deltaX = cameraTransform.position.x - lastCameraX;
        transform.position += Vector3.right * (deltaX * scrollSpeed);

        lastCameraX = cameraTransform.position.x;

        if (cameraTransform.position.x < (layers[leftIndex].transform.position.x + viewZone))
        {
            ScrollLeft();
        }

        if (cameraTransform.position.x > (layers[rightIndex].transform.position.x - viewZone))
        {
            ScrollRight();
        }
    }

    private void ScrollLeft()
    {
        int lastRight = rightIndex;
        layers[rightIndex].position = Vector3.right * (layers[leftIndex].position.x - backgroundSize);
        leftIndex = rightIndex;
        rightIndex--;

        if (rightIndex < 0)
        {
            rightIndex = layers.Length - 1;
        }
    }

    private void ScrollRight()
    {
        int lastLeft = leftIndex;
        layers[leftIndex].position = Vector3.right * (layers[rightIndex].position.x + backgroundSize);
        rightIndex = leftIndex;
        leftIndex++;

        if (leftIndex == layers.Length)
        {
            leftIndex = 0;
        }
    }

    private void ResizeBackground()
    {
        // 배경 이미지 크기를 카메라 화면 크기에 맞춤
        float cameraHeight = Camera.main.orthographicSize * 2.0f;
        float cameraWidth = cameraHeight * Camera.main.aspect;

        foreach (Transform layer in layers)
        {
            SpriteRenderer spriteRenderer = layer.GetComponent<SpriteRenderer>();
            if (spriteRenderer != null)
            {
                float spriteWidth = spriteRenderer.sprite.bounds.size.x;
                float newScaleX = cameraWidth / spriteWidth;
                layer.localScale = new Vector3(newScaleX, 1, 1);
            }
        }
    }
}

6. 메인 스크립트

using UnityEngine;
using UnityEngine.UI; // UI 네임스페이스 추가
using UnityEngine.SceneManagement;
using System.Collections;

public class RiderController : MonoBehaviour
{
    public Rigidbody2D rb;
    public float speed = 10f;
    public float boostedSpeed = 20f; // 가속된 속도
    public float rotationSpeed = 100f;
    public Text scoreText; // 점수를 표시할 UI 텍스트
    public GameObject gameOverPanel; // 게임 종료 패널 참조
    public Text gameOverScoreText; // 게임 종료 시 점수를 표시할 텍스트 UI 참조
    public Text highScoreText; // 최고 점수를 표시할 텍스트 UI
    public GameObject pauseMenu; // 일시정지 메뉴 UI 참조

    private bool isGrounded; // 차량이 땅에 닿았는지 여부
    private int score = 0; // 점수
    private int numberOfRotations = 0; // 완료된 회전 수
    private bool isGameOver = false; // 게임이 종료되었는지 여부
    private Vector2 lastPosition; // 마지막 위치
    private bool isBoosted = false; // 현재 가속 중인지 여부
    private float totalRotation = 0f;

    void Start()
    {
        rb = GetComponent<Rigidbody2D>();
        rb.collisionDetectionMode = CollisionDetectionMode2D.Continuous;
        lastPosition = rb.position; // 초기 위치 저장
        gameOverPanel.SetActive(false); // 게임 시작 시 팝업 창 비활성화
        UpdateHighScoreUI(); // 게임 시작 시 최고 점수 UI 업데이트
        pauseMenu.SetActive(false); // 일시정지 메뉴 초기 비활성화
    }

    private void OnTriggerEnter2D(Collider2D collision)
    {
        if (collision.gameObject.tag == "Boost") // "Boost" 태그를 가진 오브젝트와 충돌 시
        {
            isBoosted = true;
            StartCoroutine(BoostSpeed());
        }
    }

    IEnumerator BoostSpeed()
    {
        Debug.Log("Boost 시작 전 속도: " + speed); // 가속 시작 전 속도 출력

        float originalSpeed = speed;
        speed = boostedSpeed; // 가속

        Debug.Log("Boost 중 속도: " + speed); // 가속 중 속도 출력

        yield return new WaitForSeconds(10); // 2초 동안 가속 유지

        speed = originalSpeed; // 원래 속도로 복귀
        Debug.Log("Boost 종료 후 속도: " + speed); // 가속 종료 후 속도 출력

        isBoosted = false;
    }

    void Update()
    {
        if (!isGameOver)
        {
            // 마우스 버튼을 누르고 있을 때만 앞으로 이동하고 회전
            if (Input.GetMouseButton(0) && !isBoosted)
            {
                rb.velocity = new Vector2(speed, rb.velocity.y); // 앞으로 이동
                if (!isGrounded)
                {
                    // 마우스를 누르고 있을 때 회전 로직을 실행합니다.
                    float rotationAmount = rotationSpeed * Time.deltaTime;
                    totalRotation += rotationAmount; // 누적 회전량에 더합니다.
                    rb.angularVelocity = rotationSpeed; // Rigidbody를 사용하여 회전을 적용합니다.
                }
            }
            else
            {
                // 마우스 버튼을 뗐을 때 회전을 멈춥니다.
                rb.angularVelocity = 0;
            }

            // 회전에 따른 점수 계산 로직
            CalculateRotationScore();

            // 점수 계산 로직
            CalculateScore();

            // 일시정지 키 입력 감지
            if (Input.GetKeyDown(KeyCode.Escape))
            {
                TogglePause();
            }
        }
    }


    // 차량이 땅에 닿았는지 확인
    private void OnCollisionEnter2D(Collision2D collision)
    {
        if (collision.gameObject.tag == "Obstacle") // 장애물 태그와 충돌 감지
        {
            EndGame();
        }

        if (collision.collider.tag == "Ground")
        {
            isGrounded = true;
            CheckIfFlippedOrVertical();
        }
    }

    // 차량이 땅에서 벗어났는지 확인
    private void OnCollisionExit2D(Collision2D collision)
    {
        if (collision.collider.tag == "Ground")
        {
            isGrounded = false;
        }
    }

    void CalculateRotationScore()
    {
        // 회전량이 360도를 초과할 때마다 1점을 추가합니다.
        while (totalRotation >= 360f)
        {
            totalRotation -= 360f; // 누적 회전량에서 360도를 빼고
            score++; // 점수를 1점 증가시킵니다.
            Debug.Log("회전으로 인한 점수 증가: 현재 점수 = " + score);
        }
    }

    void UpdateRotationScore(float rotationThisFrame)
    {
        // 임의의 회전 임계값 설정, 예를 들어 완전한 회전은 360도
        if (Mathf.Abs(transform.eulerAngles.z) >= 360f)
        {
            numberOfRotations++;
            transform.eulerAngles = new Vector3(0, 0, 0); // 각도 초기화
            Debug.Log("완전한 회전 완료! 회전 점수 추가: " + numberOfRotations);
        }
    }

    void CalculateScore()
    {
        // 이동 거리에 따른 점수 계산
        if (Vector2.Distance(rb.position, lastPosition) >= 5f)
        {
            score++;
            lastPosition = rb.position;
        }

        // 회전에 따른 추가 점수
        if (numberOfRotations > 0)
        {
            score += numberOfRotations;
            numberOfRotations = 0; // 플립 점수를 주고 초기화
        }

        UpdateScoreUI();
    }

    void CheckIfFlipped()
    {
        float zRotation = transform.eulerAngles.z;
        // zRotation이 90도 이상 270도 이하일 경우 차량이 뒤집힌 것으로 간주
        if (zRotation > 70f && zRotation < 180f)
        {
            EndGame();
        }
    }

    void CheckIfFlippedOrVertical()
    {
        float zRotation = transform.eulerAngles.z;

        // zRotation이 70도 이상 290도 이하일 경우 차량이 뒤집히거나 세로로 서 있는 것으로 간주
        if ((zRotation > 70f && zRotation < 180f) || (zRotation > 180f && zRotation < 290f))
        {
            EndGame();
        }
    }

    void UpdateScoreUI()
    {
        scoreText.text = score.ToString();
    }

    void UpdateHighScore()
    {
        int highScore = PlayerPrefs.GetInt("HighScore", 0);
        if (score > highScore)
        {
            PlayerPrefs.SetInt("HighScore", score);
            highScoreText.text = score.ToString();
        }
        else
        {
            highScoreText.text = highScore.ToString();
        }
    }

    void UpdateHighScoreUI()
    {
        int highScore = PlayerPrefs.GetInt("HighScore", 0);
        highScoreText.text = highScore.ToString();
    }

    public void TogglePause()
    {
        if (!isGameOver)
        {
            if (Time.timeScale == 1)
            {
                PauseGame();
            }
            else
            {
                ResumeGame();
            }
        }
    }

    public void PauseGame()
    {
        Time.timeScale = 0; // 게임 일시정지
        pauseMenu.SetActive(true); // 일시정지 메뉴 활성화
    }

    public void ResumeGame()
    {
        Time.timeScale = 1; // 게임 재개
        pauseMenu.SetActive(false); // 일시정지 메뉴 비활성화
    }

    void EndGame()
    {
        isGameOver = true;
        Debug.Log("게임 종료됨!");
        gameOverPanel.SetActive(true); // 게임 종료 시 팝업 창 활성화
        gameOverScoreText.text = score.ToString(); // 점수 표시 업데이트
        UpdateHighScore(); // 최고 점수 업데이트 및 UI 업데이트
    }

    public void RestartGame()
    {
        SceneManager.LoadScene(SceneManager.GetActiveScene().buildIndex); // 현재 씬 재시작
    }

    public void GoToMainMenu()
    {
        Time.timeScale = 1;
        SceneManager.LoadScene("main"); // 메인 메뉴 씬 로드
    }
}
